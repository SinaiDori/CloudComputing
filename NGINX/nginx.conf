user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging configuration
    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    sendfile           on;
    keepalive_timeout  65;

    # Upstream definitions (if needed; optional if you directly specify hosts in proxy_pass)
    upstream back_end {
        server Stocks1:5001;
        server Stocks2:5002;
    }

    server {
        listen 80;

        # For the spouse: GET requests to /stocks1/{id}
        # Only GET allowed, forward to Stocks1 service
        location ~ ^/stocks1/([0-9]+)$ {
            # Restrict all methods except GET
            limit_except GET {
                deny all;
            }

            # Proxy to the stocks service1
            proxy_pass http://Stocks1/stocks/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # For the spouse: GET requests to /stocks2/{id}
        # Only GET allowed, forward to Stocks2 service
        location ~ ^/stocks2/([0-9]+)$ {
            # Restrict all methods except GET
            limit_except GET {
                deny all;
            }

            # Proxy to the stocks service2
            proxy_pass http://Stocks2/stocks/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            # Paths that does not match /stocks1 or /stocks2, deny:
            return 403;
        }
    }
}