user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging configuration
    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    sendfile           on;
    keepalive_timeout  65;

    # Upstream definitions (if needed; optional if you directly specify hosts in proxy_pass)
    upstream back_end {
        server Stocks1:8000 weight=3;
        server Stocks2:8000 weight=1;
    }

    server {
        listen 80;

        # Handle requests WITH a stock ID (e.g., /stocks1/123 or /stocks2/456)
        location ~ ^/stocks(1|2)/([0-9]+)$ {
            limit_except GET {
                deny all;
            }

            proxy_pass http://Stocks$1:8000/stocks/$2;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle requests WITHOUT a stock ID (e.g., /stocks1 or /stocks2)
        location ~ ^/stocks(1|2)$ {
            limit_except GET {
                deny all;
            }

            proxy_pass http://Stocks$1:8000/stocks;  # Pass without an ID
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            # Paths that does not match /stocks1 or /stocks2, deny:
            return 403;
        }
    }
}